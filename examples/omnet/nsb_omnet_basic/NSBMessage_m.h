//
// Generated file, do not edit! Created by opp_msgtool 6.1 from NSBMessage.msg.
//

#ifndef __NSBMESSAGE_M_H
#define __NSBMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class NSBMessage;
/**
 * Class generated from <tt>NSBMessage.msg:18</tt> by opp_msgtool.
 * <pre>
 * message NSBMessage
 * {
 *     string srcId;
 *     string destId;
 *     string payload;
 * }
 * </pre>
 */
class NSBMessage : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string srcId;
    omnetpp::opp_string destId;
    omnetpp::opp_string payload;

  private:
    void copy(const NSBMessage& other);

  protected:
    bool operator==(const NSBMessage&) = delete;

  public:
    NSBMessage(const char *name=nullptr, short kind=0);
    NSBMessage(const NSBMessage& other);
    virtual ~NSBMessage();
    NSBMessage& operator=(const NSBMessage& other);
    virtual NSBMessage *dup() const override {return new NSBMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getSrcId() const;
    virtual void setSrcId(const char * srcId);

    virtual const char * getDestId() const;
    virtual void setDestId(const char * destId);

    virtual const char * getPayload() const;
    virtual void setPayload(const char * payload);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NSBMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NSBMessage& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline NSBMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<NSBMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __NSBMESSAGE_M_H

