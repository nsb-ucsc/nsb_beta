// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: nsb.proto
// Protobuf C++ Version: 5.29.3

#ifndef nsb_2eproto_2epb_2eh
#define nsb_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_nsb_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_nsb_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_nsb_2eproto;
namespace nsb {
class Manifest;
struct ManifestDefaultTypeInternal;
extern ManifestDefaultTypeInternal _Manifest_default_instance_;
class Metadata;
struct MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
}  // namespace nsb
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace nsb {
enum Manifest_Operation : int {
  Manifest_Operation_PING = 0,
  Manifest_Operation_INIT = 1,
  Manifest_Operation_EXIT = 7,
  Manifest_Operation_Manifest_Operation_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Manifest_Operation_Manifest_Operation_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Manifest_Operation_IsValid(int value);
extern const uint32_t Manifest_Operation_internal_data_[];
constexpr Manifest_Operation Manifest_Operation_Operation_MIN = static_cast<Manifest_Operation>(0);
constexpr Manifest_Operation Manifest_Operation_Operation_MAX = static_cast<Manifest_Operation>(7);
constexpr int Manifest_Operation_Operation_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
Manifest_Operation_descriptor();
template <typename T>
const std::string& Manifest_Operation_Name(T value) {
  static_assert(std::is_same<T, Manifest_Operation>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Operation_Name().");
  return Manifest_Operation_Name(static_cast<Manifest_Operation>(value));
}
template <>
inline const std::string& Manifest_Operation_Name(Manifest_Operation value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Manifest_Operation_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool Manifest_Operation_Parse(absl::string_view name, Manifest_Operation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Manifest_Operation>(
      Manifest_Operation_descriptor(), name, value);
}
enum Manifest_Originator : int {
  Manifest_Originator_DAEMON = 0,
  Manifest_Originator_APP_CLIENT = 1,
  Manifest_Originator_SIM_CLIENT = 2,
  Manifest_Originator_Manifest_Originator_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Manifest_Originator_Manifest_Originator_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Manifest_Originator_IsValid(int value);
extern const uint32_t Manifest_Originator_internal_data_[];
constexpr Manifest_Originator Manifest_Originator_Originator_MIN = static_cast<Manifest_Originator>(0);
constexpr Manifest_Originator Manifest_Originator_Originator_MAX = static_cast<Manifest_Originator>(2);
constexpr int Manifest_Originator_Originator_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
Manifest_Originator_descriptor();
template <typename T>
const std::string& Manifest_Originator_Name(T value) {
  static_assert(std::is_same<T, Manifest_Originator>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Originator_Name().");
  return Manifest_Originator_Name(static_cast<Manifest_Originator>(value));
}
template <>
inline const std::string& Manifest_Originator_Name(Manifest_Originator value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Manifest_Originator_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool Manifest_Originator_Parse(absl::string_view name, Manifest_Originator* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Manifest_Originator>(
      Manifest_Originator_descriptor(), name, value);
}
enum Manifest_OpCode : int {
  Manifest_OpCode_SUCCESS = 0,
  Manifest_OpCode_FAILURE = 1,
  Manifest_OpCode_CLIENT_REQUEST = 2,
  Manifest_OpCode_DAEMON_RESPONSE = 3,
  Manifest_OpCode_IMPLICIT_TARGET = 4,
  Manifest_OpCode_EXPLICIT_TARGET = 5,
  Manifest_OpCode_MESSAGE = 6,
  Manifest_OpCode_NO_MESSAGE = 7,
  Manifest_OpCode_Manifest_OpCode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Manifest_OpCode_Manifest_OpCode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Manifest_OpCode_IsValid(int value);
extern const uint32_t Manifest_OpCode_internal_data_[];
constexpr Manifest_OpCode Manifest_OpCode_OpCode_MIN = static_cast<Manifest_OpCode>(0);
constexpr Manifest_OpCode Manifest_OpCode_OpCode_MAX = static_cast<Manifest_OpCode>(7);
constexpr int Manifest_OpCode_OpCode_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
Manifest_OpCode_descriptor();
template <typename T>
const std::string& Manifest_OpCode_Name(T value) {
  static_assert(std::is_same<T, Manifest_OpCode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to OpCode_Name().");
  return Manifest_OpCode_Name(static_cast<Manifest_OpCode>(value));
}
template <>
inline const std::string& Manifest_OpCode_Name(Manifest_OpCode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Manifest_OpCode_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool Manifest_OpCode_Parse(absl::string_view name, Manifest_OpCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Manifest_OpCode>(
      Manifest_OpCode_descriptor(), name, value);
}
enum Metadata_Type : int {
  Metadata_Type_INT = 0,
  Metadata_Type_STR = 1,
  Metadata_Type_Metadata_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Metadata_Type_Metadata_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Metadata_Type_IsValid(int value);
extern const uint32_t Metadata_Type_internal_data_[];
constexpr Metadata_Type Metadata_Type_Type_MIN = static_cast<Metadata_Type>(0);
constexpr Metadata_Type Metadata_Type_Type_MAX = static_cast<Metadata_Type>(1);
constexpr int Metadata_Type_Type_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
Metadata_Type_descriptor();
template <typename T>
const std::string& Metadata_Type_Name(T value) {
  static_assert(std::is_same<T, Metadata_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return Metadata_Type_Name(static_cast<Metadata_Type>(value));
}
template <>
inline const std::string& Metadata_Type_Name(Metadata_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Metadata_Type_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool Metadata_Type_Parse(absl::string_view name, Metadata_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Metadata_Type>(
      Metadata_Type_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Metadata final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nsb.Metadata) */ {
 public:
  inline Metadata() : Metadata(nullptr) {}
  ~Metadata() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Metadata* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Metadata));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Metadata(
      ::google::protobuf::internal::ConstantInitialized);

  inline Metadata(const Metadata& from) : Metadata(nullptr, from) {}
  inline Metadata(Metadata&& from) noexcept
      : Metadata(nullptr, std::move(from)) {}
  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata& operator=(Metadata&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metadata& default_instance() {
    return *internal_default_instance();
  }
  enum SrcCase {
    kSrcId = 2,
    kSrcAddr = 3,
    SRC_NOT_SET = 0,
  };
  enum DestCase {
    kDestId = 4,
    kDestAddr = 5,
    DEST_NOT_SET = 0,
  };
  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
        &_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Metadata& a, Metadata& b) { a.Swap(&b); }
  inline void Swap(Metadata* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metadata* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Metadata>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Metadata& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Metadata& from) { Metadata::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Metadata* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "nsb.Metadata"; }

 protected:
  explicit Metadata(::google::protobuf::Arena* arena);
  Metadata(::google::protobuf::Arena* arena, const Metadata& from);
  Metadata(::google::protobuf::Arena* arena, Metadata&& from) noexcept
      : Metadata(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Type = Metadata_Type;
  static constexpr Type INT = Metadata_Type_INT;
  static constexpr Type STR = Metadata_Type_STR;
  static inline bool Type_IsValid(int value) {
    return Metadata_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = Metadata_Type_Type_MIN;
  static constexpr Type Type_MAX = Metadata_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = Metadata_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Type_descriptor() {
    return Metadata_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return Metadata_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return Metadata_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kAddrTypeFieldNumber = 1,
    kPayloadSizeFieldNumber = 6,
    kSrcIdFieldNumber = 2,
    kSrcAddrFieldNumber = 3,
    kDestIdFieldNumber = 4,
    kDestAddrFieldNumber = 5,
  };
  // .nsb.Metadata.Type addr_type = 1;
  bool has_addr_type() const;
  void clear_addr_type() ;
  ::nsb::Metadata_Type addr_type() const;
  void set_addr_type(::nsb::Metadata_Type value);

  private:
  ::nsb::Metadata_Type _internal_addr_type() const;
  void _internal_set_addr_type(::nsb::Metadata_Type value);

  public:
  // int32 payload_size = 6;
  bool has_payload_size() const;
  void clear_payload_size() ;
  ::int32_t payload_size() const;
  void set_payload_size(::int32_t value);

  private:
  ::int32_t _internal_payload_size() const;
  void _internal_set_payload_size(::int32_t value);

  public:
  // string src_id = 2;
  bool has_src_id() const;
  void clear_src_id() ;
  const std::string& src_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_src_id(Arg_&& arg, Args_... args);
  std::string* mutable_src_id();
  PROTOBUF_NODISCARD std::string* release_src_id();
  void set_allocated_src_id(std::string* value);

  private:
  const std::string& _internal_src_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_src_id(
      const std::string& value);
  std::string* _internal_mutable_src_id();

  public:
  // fixed32 src_addr = 3;
  bool has_src_addr() const;
  void clear_src_addr() ;
  ::uint32_t src_addr() const;
  void set_src_addr(::uint32_t value);

  private:
  ::uint32_t _internal_src_addr() const;
  void _internal_set_src_addr(::uint32_t value);

  public:
  // string dest_id = 4;
  bool has_dest_id() const;
  void clear_dest_id() ;
  const std::string& dest_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dest_id(Arg_&& arg, Args_... args);
  std::string* mutable_dest_id();
  PROTOBUF_NODISCARD std::string* release_dest_id();
  void set_allocated_dest_id(std::string* value);

  private:
  const std::string& _internal_dest_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dest_id(
      const std::string& value);
  std::string* _internal_mutable_dest_id();

  public:
  // fixed32 dest_addr = 5;
  bool has_dest_addr() const;
  void clear_dest_addr() ;
  ::uint32_t dest_addr() const;
  void set_dest_addr(::uint32_t value);

  private:
  ::uint32_t _internal_dest_addr() const;
  void _internal_set_dest_addr(::uint32_t value);

  public:
  void clear_src();
  SrcCase src_case() const;
  void clear_dest();
  DestCase dest_case() const;
  // @@protoc_insertion_point(class_scope:nsb.Metadata)
 private:
  class _Internal;
  void set_has_src_id();
  void set_has_src_addr();
  void set_has_dest_id();
  void set_has_dest_addr();
  inline bool has_src() const;
  inline void clear_has_src();
  inline bool has_dest() const;
  inline void clear_has_dest();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 6, 0,
      34, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Metadata& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    int addr_type_;
    ::int32_t payload_size_;
    union SrcUnion {
      constexpr SrcUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr src_id_;
      ::uint32_t src_addr_;
    } src_;
    union DestUnion {
      constexpr DestUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr dest_id_;
      ::uint32_t dest_addr_;
    } dest_;
    ::uint32_t _oneof_case_[2];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nsb_2eproto;
};
// -------------------------------------------------------------------

class Manifest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nsb.Manifest) */ {
 public:
  inline Manifest() : Manifest(nullptr) {}
  ~Manifest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Manifest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Manifest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Manifest(
      ::google::protobuf::internal::ConstantInitialized);

  inline Manifest(const Manifest& from) : Manifest(nullptr, from) {}
  inline Manifest(Manifest&& from) noexcept
      : Manifest(nullptr, std::move(from)) {}
  inline Manifest& operator=(const Manifest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Manifest& operator=(Manifest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Manifest& default_instance() {
    return *internal_default_instance();
  }
  static inline const Manifest* internal_default_instance() {
    return reinterpret_cast<const Manifest*>(
        &_Manifest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Manifest& a, Manifest& b) { a.Swap(&b); }
  inline void Swap(Manifest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Manifest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Manifest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Manifest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Manifest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Manifest& from) { Manifest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Manifest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "nsb.Manifest"; }

 protected:
  explicit Manifest(::google::protobuf::Arena* arena);
  Manifest(::google::protobuf::Arena* arena, const Manifest& from);
  Manifest(::google::protobuf::Arena* arena, Manifest&& from) noexcept
      : Manifest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Operation = Manifest_Operation;
  static constexpr Operation PING = Manifest_Operation_PING;
  static constexpr Operation INIT = Manifest_Operation_INIT;
  static constexpr Operation EXIT = Manifest_Operation_EXIT;
  static inline bool Operation_IsValid(int value) {
    return Manifest_Operation_IsValid(value);
  }
  static constexpr Operation Operation_MIN = Manifest_Operation_Operation_MIN;
  static constexpr Operation Operation_MAX = Manifest_Operation_Operation_MAX;
  static constexpr int Operation_ARRAYSIZE = Manifest_Operation_Operation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Operation_descriptor() {
    return Manifest_Operation_descriptor();
  }
  template <typename T>
  static inline const std::string& Operation_Name(T value) {
    return Manifest_Operation_Name(value);
  }
  static inline bool Operation_Parse(absl::string_view name, Operation* value) {
    return Manifest_Operation_Parse(name, value);
  }
  using Originator = Manifest_Originator;
  static constexpr Originator DAEMON = Manifest_Originator_DAEMON;
  static constexpr Originator APP_CLIENT = Manifest_Originator_APP_CLIENT;
  static constexpr Originator SIM_CLIENT = Manifest_Originator_SIM_CLIENT;
  static inline bool Originator_IsValid(int value) {
    return Manifest_Originator_IsValid(value);
  }
  static constexpr Originator Originator_MIN = Manifest_Originator_Originator_MIN;
  static constexpr Originator Originator_MAX = Manifest_Originator_Originator_MAX;
  static constexpr int Originator_ARRAYSIZE = Manifest_Originator_Originator_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Originator_descriptor() {
    return Manifest_Originator_descriptor();
  }
  template <typename T>
  static inline const std::string& Originator_Name(T value) {
    return Manifest_Originator_Name(value);
  }
  static inline bool Originator_Parse(absl::string_view name, Originator* value) {
    return Manifest_Originator_Parse(name, value);
  }
  using OpCode = Manifest_OpCode;
  static constexpr OpCode SUCCESS = Manifest_OpCode_SUCCESS;
  static constexpr OpCode FAILURE = Manifest_OpCode_FAILURE;
  static constexpr OpCode CLIENT_REQUEST = Manifest_OpCode_CLIENT_REQUEST;
  static constexpr OpCode DAEMON_RESPONSE = Manifest_OpCode_DAEMON_RESPONSE;
  static constexpr OpCode IMPLICIT_TARGET = Manifest_OpCode_IMPLICIT_TARGET;
  static constexpr OpCode EXPLICIT_TARGET = Manifest_OpCode_EXPLICIT_TARGET;
  static constexpr OpCode MESSAGE = Manifest_OpCode_MESSAGE;
  static constexpr OpCode NO_MESSAGE = Manifest_OpCode_NO_MESSAGE;
  static inline bool OpCode_IsValid(int value) {
    return Manifest_OpCode_IsValid(value);
  }
  static constexpr OpCode OpCode_MIN = Manifest_OpCode_OpCode_MIN;
  static constexpr OpCode OpCode_MAX = Manifest_OpCode_OpCode_MAX;
  static constexpr int OpCode_ARRAYSIZE = Manifest_OpCode_OpCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* OpCode_descriptor() {
    return Manifest_OpCode_descriptor();
  }
  template <typename T>
  static inline const std::string& OpCode_Name(T value) {
    return Manifest_OpCode_Name(value);
  }
  static inline bool OpCode_Parse(absl::string_view name, OpCode* value) {
    return Manifest_OpCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kOpFieldNumber = 1,
    kOgFieldNumber = 2,
    kCodeFieldNumber = 3,
  };
  // .nsb.Manifest.Operation op = 1;
  bool has_op() const;
  void clear_op() ;
  ::nsb::Manifest_Operation op() const;
  void set_op(::nsb::Manifest_Operation value);

  private:
  ::nsb::Manifest_Operation _internal_op() const;
  void _internal_set_op(::nsb::Manifest_Operation value);

  public:
  // .nsb.Manifest.Originator og = 2;
  bool has_og() const;
  void clear_og() ;
  ::nsb::Manifest_Originator og() const;
  void set_og(::nsb::Manifest_Originator value);

  private:
  ::nsb::Manifest_Originator _internal_og() const;
  void _internal_set_og(::nsb::Manifest_Originator value);

  public:
  // .nsb.Manifest.OpCode code = 3;
  bool has_code() const;
  void clear_code() ;
  ::nsb::Manifest_OpCode code() const;
  void set_code(::nsb::Manifest_OpCode value);

  private:
  ::nsb::Manifest_OpCode _internal_code() const;
  void _internal_set_code(::nsb::Manifest_OpCode value);

  public:
  // @@protoc_insertion_point(class_scope:nsb.Manifest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Manifest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    int op_;
    int og_;
    int code_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nsb_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Manifest

// .nsb.Manifest.Operation op = 1;
inline bool Manifest::has_op() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Manifest::clear_op() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::nsb::Manifest_Operation Manifest::op() const {
  // @@protoc_insertion_point(field_get:nsb.Manifest.op)
  return _internal_op();
}
inline void Manifest::set_op(::nsb::Manifest_Operation value) {
  _internal_set_op(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:nsb.Manifest.op)
}
inline ::nsb::Manifest_Operation Manifest::_internal_op() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::nsb::Manifest_Operation>(_impl_.op_);
}
inline void Manifest::_internal_set_op(::nsb::Manifest_Operation value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_ = value;
}

// .nsb.Manifest.Originator og = 2;
inline bool Manifest::has_og() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Manifest::clear_og() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.og_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::nsb::Manifest_Originator Manifest::og() const {
  // @@protoc_insertion_point(field_get:nsb.Manifest.og)
  return _internal_og();
}
inline void Manifest::set_og(::nsb::Manifest_Originator value) {
  _internal_set_og(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:nsb.Manifest.og)
}
inline ::nsb::Manifest_Originator Manifest::_internal_og() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::nsb::Manifest_Originator>(_impl_.og_);
}
inline void Manifest::_internal_set_og(::nsb::Manifest_Originator value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.og_ = value;
}

// .nsb.Manifest.OpCode code = 3;
inline bool Manifest::has_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Manifest::clear_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::nsb::Manifest_OpCode Manifest::code() const {
  // @@protoc_insertion_point(field_get:nsb.Manifest.code)
  return _internal_code();
}
inline void Manifest::set_code(::nsb::Manifest_OpCode value) {
  _internal_set_code(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:nsb.Manifest.code)
}
inline ::nsb::Manifest_OpCode Manifest::_internal_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::nsb::Manifest_OpCode>(_impl_.code_);
}
inline void Manifest::_internal_set_code(::nsb::Manifest_OpCode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_ = value;
}

// -------------------------------------------------------------------

// Metadata

// .nsb.Metadata.Type addr_type = 1;
inline bool Metadata::has_addr_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Metadata::clear_addr_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.addr_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::nsb::Metadata_Type Metadata::addr_type() const {
  // @@protoc_insertion_point(field_get:nsb.Metadata.addr_type)
  return _internal_addr_type();
}
inline void Metadata::set_addr_type(::nsb::Metadata_Type value) {
  _internal_set_addr_type(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:nsb.Metadata.addr_type)
}
inline ::nsb::Metadata_Type Metadata::_internal_addr_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::nsb::Metadata_Type>(_impl_.addr_type_);
}
inline void Metadata::_internal_set_addr_type(::nsb::Metadata_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.addr_type_ = value;
}

// string src_id = 2;
inline bool Metadata::has_src_id() const {
  return src_case() == kSrcId;
}
inline void Metadata::set_has_src_id() {
  _impl_._oneof_case_[0] = kSrcId;
}
inline void Metadata::clear_src_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (src_case() == kSrcId) {
    _impl_.src_.src_id_.Destroy();
    clear_has_src();
  }
}
inline const std::string& Metadata::src_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nsb.Metadata.src_id)
  return _internal_src_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_src_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (src_case() != kSrcId) {
    clear_src();

    set_has_src_id();
    _impl_.src_.src_id_.InitDefault();
  }
  _impl_.src_.src_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nsb.Metadata.src_id)
}
inline std::string* Metadata::mutable_src_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_src_id();
  // @@protoc_insertion_point(field_mutable:nsb.Metadata.src_id)
  return _s;
}
inline const std::string& Metadata::_internal_src_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (src_case() != kSrcId) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.src_.src_id_.Get();
}
inline void Metadata::_internal_set_src_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (src_case() != kSrcId) {
    clear_src();

    set_has_src_id();
    _impl_.src_.src_id_.InitDefault();
  }
  _impl_.src_.src_id_.Set(value, GetArena());
}
inline std::string* Metadata::_internal_mutable_src_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (src_case() != kSrcId) {
    clear_src();

    set_has_src_id();
    _impl_.src_.src_id_.InitDefault();
  }
  return _impl_.src_.src_id_.Mutable( GetArena());
}
inline std::string* Metadata::release_src_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:nsb.Metadata.src_id)
  if (src_case() != kSrcId) {
    return nullptr;
  }
  clear_has_src();
  return _impl_.src_.src_id_.Release();
}
inline void Metadata::set_allocated_src_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_src()) {
    clear_src();
  }
  if (value != nullptr) {
    set_has_src_id();
    _impl_.src_.src_id_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:nsb.Metadata.src_id)
}

// fixed32 src_addr = 3;
inline bool Metadata::has_src_addr() const {
  return src_case() == kSrcAddr;
}
inline void Metadata::set_has_src_addr() {
  _impl_._oneof_case_[0] = kSrcAddr;
}
inline void Metadata::clear_src_addr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (src_case() == kSrcAddr) {
    _impl_.src_.src_addr_ = 0u;
    clear_has_src();
  }
}
inline ::uint32_t Metadata::src_addr() const {
  // @@protoc_insertion_point(field_get:nsb.Metadata.src_addr)
  return _internal_src_addr();
}
inline void Metadata::set_src_addr(::uint32_t value) {
  if (src_case() != kSrcAddr) {
    clear_src();
    set_has_src_addr();
  }
  _impl_.src_.src_addr_ = value;
  // @@protoc_insertion_point(field_set:nsb.Metadata.src_addr)
}
inline ::uint32_t Metadata::_internal_src_addr() const {
  if (src_case() == kSrcAddr) {
    return _impl_.src_.src_addr_;
  }
  return 0u;
}

// string dest_id = 4;
inline bool Metadata::has_dest_id() const {
  return dest_case() == kDestId;
}
inline void Metadata::set_has_dest_id() {
  _impl_._oneof_case_[1] = kDestId;
}
inline void Metadata::clear_dest_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (dest_case() == kDestId) {
    _impl_.dest_.dest_id_.Destroy();
    clear_has_dest();
  }
}
inline const std::string& Metadata::dest_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nsb.Metadata.dest_id)
  return _internal_dest_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_dest_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (dest_case() != kDestId) {
    clear_dest();

    set_has_dest_id();
    _impl_.dest_.dest_id_.InitDefault();
  }
  _impl_.dest_.dest_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nsb.Metadata.dest_id)
}
inline std::string* Metadata::mutable_dest_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_dest_id();
  // @@protoc_insertion_point(field_mutable:nsb.Metadata.dest_id)
  return _s;
}
inline const std::string& Metadata::_internal_dest_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (dest_case() != kDestId) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.dest_.dest_id_.Get();
}
inline void Metadata::_internal_set_dest_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (dest_case() != kDestId) {
    clear_dest();

    set_has_dest_id();
    _impl_.dest_.dest_id_.InitDefault();
  }
  _impl_.dest_.dest_id_.Set(value, GetArena());
}
inline std::string* Metadata::_internal_mutable_dest_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (dest_case() != kDestId) {
    clear_dest();

    set_has_dest_id();
    _impl_.dest_.dest_id_.InitDefault();
  }
  return _impl_.dest_.dest_id_.Mutable( GetArena());
}
inline std::string* Metadata::release_dest_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:nsb.Metadata.dest_id)
  if (dest_case() != kDestId) {
    return nullptr;
  }
  clear_has_dest();
  return _impl_.dest_.dest_id_.Release();
}
inline void Metadata::set_allocated_dest_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_dest()) {
    clear_dest();
  }
  if (value != nullptr) {
    set_has_dest_id();
    _impl_.dest_.dest_id_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:nsb.Metadata.dest_id)
}

// fixed32 dest_addr = 5;
inline bool Metadata::has_dest_addr() const {
  return dest_case() == kDestAddr;
}
inline void Metadata::set_has_dest_addr() {
  _impl_._oneof_case_[1] = kDestAddr;
}
inline void Metadata::clear_dest_addr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (dest_case() == kDestAddr) {
    _impl_.dest_.dest_addr_ = 0u;
    clear_has_dest();
  }
}
inline ::uint32_t Metadata::dest_addr() const {
  // @@protoc_insertion_point(field_get:nsb.Metadata.dest_addr)
  return _internal_dest_addr();
}
inline void Metadata::set_dest_addr(::uint32_t value) {
  if (dest_case() != kDestAddr) {
    clear_dest();
    set_has_dest_addr();
  }
  _impl_.dest_.dest_addr_ = value;
  // @@protoc_insertion_point(field_set:nsb.Metadata.dest_addr)
}
inline ::uint32_t Metadata::_internal_dest_addr() const {
  if (dest_case() == kDestAddr) {
    return _impl_.dest_.dest_addr_;
  }
  return 0u;
}

// int32 payload_size = 6;
inline bool Metadata::has_payload_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Metadata::clear_payload_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Metadata::payload_size() const {
  // @@protoc_insertion_point(field_get:nsb.Metadata.payload_size)
  return _internal_payload_size();
}
inline void Metadata::set_payload_size(::int32_t value) {
  _internal_set_payload_size(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:nsb.Metadata.payload_size)
}
inline ::int32_t Metadata::_internal_payload_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.payload_size_;
}
inline void Metadata::_internal_set_payload_size(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_size_ = value;
}

inline bool Metadata::has_src() const {
  return src_case() != SRC_NOT_SET;
}
inline void Metadata::clear_has_src() {
  _impl_._oneof_case_[0] = SRC_NOT_SET;
}
inline bool Metadata::has_dest() const {
  return dest_case() != DEST_NOT_SET;
}
inline void Metadata::clear_has_dest() {
  _impl_._oneof_case_[1] = DEST_NOT_SET;
}
inline Metadata::SrcCase Metadata::src_case() const {
  return Metadata::SrcCase(_impl_._oneof_case_[0]);
}
inline Metadata::DestCase Metadata::dest_case() const {
  return Metadata::DestCase(_impl_._oneof_case_[1]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace nsb


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::nsb::Manifest_Operation> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::nsb::Manifest_Operation>() {
  return ::nsb::Manifest_Operation_descriptor();
}
template <>
struct is_proto_enum<::nsb::Manifest_Originator> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::nsb::Manifest_Originator>() {
  return ::nsb::Manifest_Originator_descriptor();
}
template <>
struct is_proto_enum<::nsb::Manifest_OpCode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::nsb::Manifest_OpCode>() {
  return ::nsb::Manifest_OpCode_descriptor();
}
template <>
struct is_proto_enum<::nsb::Metadata_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::nsb::Metadata_Type>() {
  return ::nsb::Metadata_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // nsb_2eproto_2epb_2eh
